--- a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
@@ -69,4 +_,43 @@
         this.readFromBytes(bytes, true);
     }
     // Paper end - byte array serialization
+
+    // Daydream start - Add more PDC API
+    /**
+     * Stores a metadata value on the {@link PersistentDataHolder} instance.
+     * <p>
+     * This API cannot be used to manipulate minecraft data, as the values will
+     * be stored using your namespace. This method will override any existing
+     * value the {@link PersistentDataHolder} may have stored under the provided
+     * key.
+     *
+     * @param key the key this value will be stored under
+     * @param type the type this tag uses
+     * @param value the value to store in the tag
+     * @param <P> the generic java type of the tag value
+     * @param <C> the generic type of the object to store
+     *
+     * @throws IllegalArgumentException if the key is null
+     * @throws IllegalArgumentException if the type is null
+     * @throws IllegalArgumentException if the value is null. Removing a tag should
+     * be done using {@link #remove(NamespacedKey)}
+     * @throws IllegalArgumentException if no suitable adapter was found for
+     * the {@link PersistentDataType#getPrimitiveType()}
+     */
+    <P, C> void set(@NotNull String key, @NotNull PersistentDataType<P, C> type, @NotNull C value);
+
+    /**
+     * Removes a custom key from the {@link PersistentDataHolder} instance.
+     *
+     * @param key the key to remove
+     *
+     * @throws IllegalArgumentException if the provided key is null
+     */
+    void remove(@NotNull String key);
+
+    /**
+     * Clears instances.
+     */
+    void clear();
+    // Daydream end - Add more PDC API
 }
