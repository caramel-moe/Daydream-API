From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Tue, 12 Oct 2021 20:40:48 +0900
Subject: [PATCH] Add Brigadier Command API


diff --git a/src/main/java/io/papermc/paper/command/brigadier/CommandRegistrationFlag.java b/src/main/java/io/papermc/paper/command/brigadier/CommandRegistrationFlag.java
index cfcf330bc91690e4e57cd7fefcee6bc104c98984..5f4f73f861ce56e9ce17c46c442a1f0b49506817 100644
--- a/src/main/java/io/papermc/paper/command/brigadier/CommandRegistrationFlag.java
+++ b/src/main/java/io/papermc/paper/command/brigadier/CommandRegistrationFlag.java
@@ -11,6 +11,13 @@ import org.jetbrains.annotations.ApiStatus;
 @ApiStatus.Internal
 public enum CommandRegistrationFlag {
 
+    // Daydream start - (feature) Add Brigadier Command API
+    /**
+     * Indicates that this command does not need to be re-registered during registry reloads.
+     * It is automatically preserved and copied to the new command dispatcher.
+     */
+    RELOADABLE,
+    // Daydream end - (feature) Add Brigadier Command API
     /**
      * @deprecated This is the default behavior now.
      */
diff --git a/src/main/java/moe/caramel/daydream/brigadier/Arguments.java b/src/main/java/moe/caramel/daydream/brigadier/Arguments.java
new file mode 100644
index 0000000000000000000000000000000000000000..b575357f2269122aca51a9c79ce447c2a557b7bc
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/Arguments.java
@@ -0,0 +1,378 @@
+package moe.caramel.daydream.brigadier;
+
+import static moe.caramel.daydream.brigadier.argument.SimpleArgument.create;
+import com.google.common.collect.Range;
+import com.mojang.authlib.GameProfile;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import io.papermc.paper.command.brigadier.argument.ArgumentTypes;
+import io.papermc.paper.entity.LookAnchor;
+import io.papermc.paper.math.FinePosition;
+import io.papermc.paper.math.Rotation;
+import it.unimi.dsi.fastutil.ints.IntList;
+import moe.caramel.daydream.brigadier.argument.*;
+import moe.caramel.daydream.brigadier.data.*;
+import moe.caramel.daydream.util.NumberRange;
+import net.kyori.adventure.nbt.api.BinaryTagHolder;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.format.Style;
+import net.kyori.adventure.text.format.TextColor;
+import org.bukkit.Axis;
+import org.bukkit.GameMode;
+import org.bukkit.HeightMap;
+import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Particle;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.block.structure.Mirror;
+import org.bukkit.block.structure.StructureRotation;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.scoreboard.Criteria;
+import org.bukkit.scoreboard.DisplaySlot;
+import org.bukkit.scoreboard.Objective;
+import org.bukkit.scoreboard.Team;
+import org.bukkit.util.Vector;
+import org.jspecify.annotations.NullMarked;
+import java.util.Collection;
+import java.util.EnumSet;
+import java.util.UUID;
+import java.util.function.Predicate;
+
+/**
+ * Brigadier Vanilla Arguments
+ *
+ * @deprecated 다음 메이저 업데이트에서 제거
+ * @see ArgumentTypes
+ * @see Resolvers
+ */
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public final class Arguments {
+
+    /**
+     * It's a constant class.
+     * Don't create instances.
+     */
+    private Arguments() { throw new UnsupportedOperationException(); }
+
+    /**
+     * Example: "Player", "0123", "@e", "@e[type=foo]", "dd12be42-52a9-4a91-a8a1-11c01849e498"
+     */
+    public static final EntityArgument ENTITY = new EntityArgument() { };
+
+    /**
+     * Example: "Player", "0123", "dd12be42-52a9-4a91-a8a1-11c01849e498", "@e"
+     */
+    public static final SimpleArgument<Collection<GameProfile>> GAME_PROFILES = create(ArgumentTypes.gameProfiles(), Resolvers::gameProfiles);
+
+    /**
+     * Example: "0 0 0", "~ ~ ~", "^ ^ ^", "^1 ^ ^-5", "~0.5 ~1 ~-5"
+     */
+    public static final BlockPosArgument BLOCK_POS = BlockPosArgument.create();
+
+    /**
+     * Example: "0 0 0", "~ ~ ~", "^ ^ ^", "^1 ^ ^-5", "0.1 -0.5 .9", "~0.5 ~1 ~-5"
+     */
+    public static final VecArgument VEC3 = VecArgument.create(
+        ArgumentTypes.finePosition(),
+        ArgumentTypes::finePosition,
+        (context, name) -> {
+            final FinePosition position = Resolvers.finePosition(context, name);
+            return new Position<>() {
+                @Override
+                public Vector getPositionVector(final CommandSourceStack source) {
+                    return position.toVector();
+                }
+
+                @Override
+                public Location getLocation(final CommandSourceStack source) {
+                    return position.toLocation(source.getLocation().getWorld());
+                }
+            };
+        });
+
+    /**
+     * Example: "0 0", "~ ~", "0.1 -0.5", "~1 ~-2"
+     */
+    public static final VecArgument VEC2 = VecArgument.create(
+        ArgumentTypes.rotation(),
+        b -> ArgumentTypes.rotation(),
+        (context, name) -> {
+            final Rotation rotation = Resolvers.rotation(context, name);
+            return new Position<>() {
+                @Override
+                public Vector getPositionVector(final CommandSourceStack source) {
+                    return new Vector(rotation.pitch(), 0, rotation.yaw());
+                }
+
+                @Override
+                public Location getLocation(final CommandSourceStack source) {
+                    final Location location = source.getLocation();
+                    location.setPitch(rotation.pitch());
+                    location.setYaw(rotation.yaw());
+                    return location;
+                }
+            };
+        });
+
+    /**
+     * Example: "0 0", "~ ~", "~1 ~-2", "^ ^", "^-1 ^0"
+     */
+    public static final SimpleArgument<Position<CommandSourceStack>> COLUMN_POS = VEC2;
+
+    /**
+     * Example: "stone", "minecraft:stone", "stone[foo=bar]", "foo{bar=baz}"
+     */
+    public static final BlockStateArgument BLOCK_STATE = BlockStateArgument.create();
+
+    /**
+     * Example: "stone", "minecraft:stone", "stone[foo=bar]", "#stone", "#stone[foo=bar]{baz=nbt}"
+     */
+    @Deprecated(forRemoval = true)
+    public static final SimpleArgument<Predicate<Block>> BLOCK_PREDICATE = create();
+
+    /**
+     * Example: "stick", "minecraft:stick", "stick{foo=bar}"
+     */
+    public static final ItemArgument ITEM = ItemArgument.create();
+
+    /**
+     * Example: "stick", "minecraft:stick", "#stick", "#stick{foo=bar}"
+     */
+    public static final SimpleArgument<Predicate<ItemStack>> ITEM_PREDICATE = create(ArgumentTypes.itemPredicate(), Resolvers::itemPredicate);
+
+    /**
+     * Example: "red", "green"
+     */
+    public static final SimpleArgument<NamedTextColor> COLOR = create(ArgumentTypes.namedColor(), Resolvers::namedColor);
+
+    /**
+     * Example: "F00", "FF0000"
+     */
+    public static final SimpleArgument<TextColor> HEX_COLOR = create(ArgumentTypes.hexColor(), Resolvers::hexColor);
+
+    /**
+     * Example: "\"hello world\"", "\"\"", "\"{\"text\":\"hello world\"}", "[\"\"]"
+     */
+    public static final SimpleArgument<Component> COMPONENT = create(ArgumentTypes.component(), Resolvers::component);
+
+    /**
+     * Example: {"bold": true}
+     * @since Minecraft 1.20.3
+     */
+    public static final SimpleArgument<Style> STYLE = create(ArgumentTypes.style(), Resolvers::style);
+
+    /**
+     * Example: "Hello world!", "foo", "@e", "Hello @p :)"
+     */
+    public static final MessageArgument MESSAGE = MessageArgument.create();
+
+    /**
+     * Example: "{}", "{foo=bar}"
+     */
+    public static final SimpleArgument<BinaryTagHolder> COMPOUND_TAG = create(ArgumentTypes.compoundTag(), Resolvers::compoundTag);
+
+    /*
+     * Example: "0", "0b", "0l", "0.0", "\"foo\"", "{foo=bar}", "[0]"
+     * NBT_TAG
+     */
+
+    /*
+     * Example: "foo", "foo.bar", "foo[0]", "[0]", "[]", "{foo=bar}"
+     * NBT_PATH
+     */
+
+    /**
+     * Example: "foo", "*", "012"
+     */
+    @Deprecated(forRemoval = true)
+    public static final SimpleArgument<Objective> OBJECTIVE = create();
+
+    /**
+     * Example: "foo", "foo.bar.baz", "minecraft:foo"
+     */
+    public static final SimpleArgument<String> OBJECTIVE_CRITERIA = create(ArgumentTypes.objectiveCriteria(), (context, name) -> {
+        final Criteria criteria = Resolvers.objectiveCriteria(context, name);
+        return criteria.getName();
+    });
+
+    /*
+     * Example: "=", "{@literal >}", "{@literal <}"
+     * @since Removed in Daydream 1.21.4
+     * OPERATION
+     */
+
+    /**
+     * Example: "foo", "foo:bar", "particle with options"
+     */
+    @Deprecated(forRemoval = true)
+    public static final SimpleArgument<Particle> PARTICLE = create();
+
+    /**
+     * Example: "0", "~", "~-5"
+     */
+    public static final SimpleArgument<Float> ANGLE = create(); // TODO PaperMC/Paper#12665
+
+    /**
+     * Example: "0 0", "~ ~", "~-5 ~5"
+     */
+    public static final SimpleArgument<Position<CommandSourceStack>> ROTATION = VEC2;
+
+    /**
+     * Example: "sidebar", "sidebar.team.light_purple"
+     */
+    public static final SimpleArgument<DisplaySlot> SCOREBOARD_SLOT = create(ArgumentTypes.scoreboardDisplaySlot(), Resolvers::scoreboardDisplaySlot);
+
+    /**
+     * Example: "Player", "0123", "*", "@e"
+     */
+    @Deprecated(forRemoval = true)
+    public static final ScoreHolderArgument SCORE_HOLDER = new ScoreHolderArgument() { };
+
+    /**
+     * Example: "xyz", "x"
+     */
+    public static final SimpleArgument<EnumSet<Axis>> SWIZZLE = create(); // TODO PaperMC/Paper#12665
+
+    /**
+     * Example: "foo", "123"
+     */
+    @Deprecated(forRemoval = true)
+    public static final SimpleArgument<Team> TEAM = create();
+
+    /**
+     * Example: "container.5", "12", "weapon"
+     */
+    public static final SimpleArgument<Integer> SLOT = create(ArgumentTypes.slot(), Resolvers::slot);
+
+    /**
+     * Example: "container.*", "container.5", "weapon"
+     * @since Minecraft 1.20.5
+     */
+    public static final SimpleArgument<IntList> SLOTS = create(ArgumentTypes.slots(), Resolvers::slots);
+
+    /**
+     * Example: "foo", "foo:bar", "012"
+     */
+    public static final SimpleArgument<NamespacedKey> RESOURCE_LOCATION = create(ArgumentTypes.namespacedKey(), Resolvers::namespacedKey);
+
+    /*
+     * Example: "foo", "foo:bar", "#foo"
+     * FUNCTION
+     */
+
+    /**
+     * Example: "eyes", "feet"
+     */
+    public static final SimpleArgument<EntityAnchorArgument> ENTITY_ANCHOR = create(
+        ArgumentTypes.entityAnchor(),
+        (context, name) -> {
+            final LookAnchor anchor = context.getArgument(name, LookAnchor.class);
+            return entity -> switch (anchor) {
+                case FEET -> entity.getLocation().toVector();
+                case EYES -> {
+                    final double eyeHeight = (entity instanceof LivingEntity l) ? l.getEyeHeight() : 0.0d; // ...
+                    yield entity.getLocation().add(0, eyeHeight, 0).toVector();
+                }
+            };
+        });
+
+    /**
+     * Example: "0..5", "0", "-5", "-100..", "..100"
+     */
+    public static final SimpleArgument<NumberRange<Integer>> RANGE_INTEGER = create(ArgumentTypes.integerRange(), (context, name) -> {
+        final Range<Integer> range = Resolvers.integerRange(context, name);
+        return new NumberRange<>(range.lowerEndpoint(), range.upperEndpoint());
+    });
+
+    /**
+     * Example: "0..5.2", "0", "-5.4", "-100.76..", "..100"
+     */
+    public static final SimpleArgument<NumberRange<Double>> RANGE_FLOATS = create(ArgumentTypes.doubleRange(), (context, name) -> {
+        final Range<Double> range = Resolvers.doubleRange(context, name);
+        return new NumberRange<>(range.lowerEndpoint(), range.upperEndpoint());
+    });
+
+    /**
+     * Example: "minecraft:overworld", "minecraft:the_nether"
+     * Please use this API's suggestion.
+     */
+    public static final SimpleArgument<World> DIMENSION = create(ArgumentTypes.world(), Resolvers::world);
+
+    /**
+     * Example: "survival", "creative", "adventure", "spectator"
+     */
+    public static final SimpleArgument<GameMode> GAMEMODE = create(ArgumentTypes.gameMode(), Resolvers::gameMode);
+
+    /**
+     * Example: "0d", "0s", "0t", "0"
+     */
+    public static final TimeArgument TIME = TimeArgument.create();
+
+    /*
+     * Example: "foo", "foo:bar", "012", "#skeletons", "#minecraft:skeletons"
+     * @since Minecraft 1.18.2
+     * RESOURCE_OR_TAG
+     */
+
+    /*
+     * Example: "foo", "foo:bar", "012", "#skeletons", "#minecraft:skeletons"
+     * @since Minecraft 1.19.3
+     * RESOURCE_OR_TAG_KEY
+     */
+
+    /*
+     * Example: "foo", "foo:bar", "012"
+     * @since Minecraft 1.18.2
+     * RESOURCE_KEY
+     */
+
+    /*
+     * Example: "foo", "foo:bar", "012"
+     * @since Minecraft 1.19.3
+     * RESOURCE
+     */
+
+    /**
+     * Example: "template_mirror", "left_right", "none"
+     * @since Minecraft 1.19
+     */
+    public static final SimpleArgument<Mirror> TEMPLATE_MIRROR = create(ArgumentTypes.templateMirror(), Resolvers::templateMirror);
+
+    /**
+     * Example: "180", "clockwise_90", "counterclockwise_90", "none"
+     * @since Minecraft 1.19
+     */
+    public static final SimpleArgument<StructureRotation> TEMPLATE_ROTATION = create(ArgumentTypes.templateRotation(), Resolvers::templateRotation);
+
+    /**
+     * Example: "world_surface", "ocean_floor", "motion_blocking", "motion_blocking_no_leaves"
+     * @since Minecraft 1.19.4
+     */
+    public static final SimpleArgument<HeightMap> HEIGHT_MAP = create(ArgumentTypes.heightMap(), Resolvers::heightMap);
+
+    /**
+     * Example: "dd12be42-52a9-4a91-a8a1-11c01849e498"
+     */
+    public static final SimpleArgument<UUID> UUID = create(ArgumentTypes.uuid(), Resolvers::uuid);
+
+    /*
+     * Example: "foo", "foo:bar", "012"
+     * @since Minecraft 1.20.5
+     * LOOT_TABLE
+     */
+
+    /*
+     * Example: "foo", "foo:bar", "012"
+     * @since Minecraft 1.20.5
+     * LOOT_PREDICATE
+     */
+
+    /*
+     * Example: "foo", "foo:bar", "012"
+     * @since Minecraft 1.20.5
+     * LOOT_MODIFIER
+     */
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/BrigadierCommand.java b/src/main/java/moe/caramel/daydream/brigadier/BrigadierCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..f04d65d1286f2e3a8564781c93eb62461d6fddf3
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/BrigadierCommand.java
@@ -0,0 +1,302 @@
+package moe.caramel.daydream.brigadier;
+
+import static net.kyori.adventure.text.Component.text;
+import static net.kyori.adventure.text.format.NamedTextColor.RED;
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.ParseResults;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.builder.LiteralArgumentBuilder;
+import com.mojang.brigadier.builder.RequiredArgumentBuilder;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import com.mojang.brigadier.suggestion.Suggestions;
+import com.mojang.brigadier.suggestion.SuggestionsBuilder;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import io.papermc.paper.command.brigadier.Commands;
+import io.papermc.paper.command.brigadier.MessageComponentSerializer;
+import net.kyori.adventure.text.Component;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandException;
+import org.bukkit.command.CommandSender;
+import org.jspecify.annotations.NullMarked;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+import java.util.function.Supplier;
+
+/**
+ * Brigadier 명령어
+ */
+@NullMarked
+public abstract class BrigadierCommand extends Command {
+
+    public static final int SUCCESS = 0;
+    public static final int SINGLE_SUCCESS = 1;
+    public static final int FAILED = -1;
+
+    //<editor-fold desc="Commands" defaultstate="collapsed">
+    protected final LiteralCommandNode<CommandSourceStack> command;
+
+    /**
+     * Brigadier 기반 명령어를 생성합니다.
+     *
+     * @param name 명령어의 이름
+     */
+    protected BrigadierCommand(final String name) {
+        super(name);
+
+        // Create Brigadier command
+        final LiteralArgumentBuilder<CommandSourceStack> builder = literal(this.getName());
+        this.buildCommand(builder);
+        this.command = builder.build();
+    }
+
+    /**
+     * Brigadier 명령어를 생성합니다.
+     *
+     * @param builder 명령어 빌더
+     */
+    public abstract void buildCommand(LiteralArgumentBuilder<CommandSourceStack> builder);
+
+    /**
+     * 명령어 노드를 가져옵니다.
+     *
+     * @return 명령어 노드
+     */
+    public final LiteralCommandNode<CommandSourceStack> getCommand() {
+        return command;
+    }
+    //</editor-fold>
+
+    //<editor-fold desc="Argument utility methods" defaultstate="collapsed">
+    /**
+     * 리터럴 인자를 생성합니다.
+     *
+     * @param literal 리터럴 인자의 이름
+     * @return 리터럴 인자
+     */
+    public static LiteralArgumentBuilder<CommandSourceStack> literal(final String literal) {
+        return Commands.literal(literal);
+    }
+
+    /**
+     * 입력 인자를 생성합니다.
+     *
+     * @param name 입력 인자의 이름
+     * @param type 입력 인자의 타입 인스턴스
+     * @return 필수 입력
+     * @param <T> 인자의 타입
+     */
+    public static <T> RequiredArgumentBuilder<CommandSourceStack, T> argument(final String name, final ArgumentType<T> type) {
+        return Commands.argument(name, type);
+    }
+    //</editor-fold>
+
+    //<editor-fold desc="Sender utility methods" defaultstate="collapsed">
+    /**
+     * 명령어 실행 주체를 가져옵니다.
+     *
+     * @param context 명령 컨텍스트
+     * @return Bukkit 명령어 실행 주체
+     */
+    public static CommandSender sender(final CommandContext<CommandSourceStack> context) {
+        return sender(context.getSource());
+    }
+
+    /**
+     * 명령어 실행 주체를 가져옵니다.
+     *
+     * @param source 명령어 실행 주체
+     * @return Bukkit 명령어 실행 주체
+     */
+    public static CommandSender sender(final CommandSourceStack source) {
+        return source.getSender();
+    }
+    //</editor-fold>
+
+    //<editor-fold desc="Suggestion utility methods" defaultstate="collapsed">
+    /**
+     * (정적) 명령어 제안을 생성합니다.
+     *
+     * @param strings 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    public static SuggestionProvider<CommandSourceStack> suggest(final String... strings) {
+        return suggest(List.of(strings));
+    }
+
+    /**
+     * (정적) 명령어 제안을 생성합니다.
+     *
+     * @param strings 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    public static SuggestionProvider<CommandSourceStack> suggest(final Collection<String> strings) {
+        return (c, b) -> suggest(b, strings);
+    }
+
+    /**
+     * (동적) 명령어 제안을 생성합니다.
+     *
+     * @param strings 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    public static SuggestionProvider<CommandSourceStack> suggest(final Supplier<String[]> strings) {
+        return suggest(list -> list.addAll(List.of(strings.get())));
+    }
+
+    /**
+     * (동적) 명령어 제안을 생성합니다.
+     *
+     * @param strings 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    public static SuggestionProvider<CommandSourceStack> suggest(final Consumer<Collection<String>> strings) {
+        return suggest((source, list) -> strings.accept(list));
+    }
+
+    /**
+     * (동적) 명령어 제안을 생성합니다.
+     *
+     * @param strings 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    public static SuggestionProvider<CommandSourceStack> suggest(final BiConsumer<CommandSourceStack, Collection<String>> strings) {
+        return (c, b) -> {
+            final List<String> list = new ArrayList<>();
+            strings.accept(c.getSource(), list);
+            return suggest(b, list);
+        };
+    }
+
+    /**
+     * (정적) 툴팁이 포함된 명령어 제안을 생성합니다.
+     *
+     * @param suggestions 툴팁이 포함된 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    public static SuggestionProvider<CommandSourceStack> hoverSuggest(final Map<String, Component> suggestions) {
+        return (c, b) -> suggest(b, suggestions);
+    }
+
+    /**
+     * (동적) 툴팁이 포함된 명령어 제안을 생성합니다.
+     *
+     * @param suggestions 툴팁이 포함된 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    public static SuggestionProvider<CommandSourceStack> hoverSuggest(final Consumer<Map<String, Component>> suggestions) {
+        return hoverSuggest((source, map) -> suggestions.accept(map));
+    }
+
+    /**
+     * (동적) 툴팁이 포함된 명령어 제안을 생성합니다.
+     *
+     * @param suggestions 툴팁이 포함된 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    public static SuggestionProvider<CommandSourceStack> hoverSuggest(final BiConsumer<CommandSourceStack, Map<String, Component>> suggestions) {
+        return (c, b) -> {
+            final Map<String, Component> map = new HashMap<>();
+            suggestions.accept(c.getSource(), map);
+            return suggest(b, map);
+        };
+    }
+
+    /**
+     * 입력 내용에 기반하여 제안 빌더와 일치하는 제안을 가져옵니다.
+     *
+     * @param builder 제안 빌더
+     * @param suggestions 제안 목록
+     * @return 제안
+     */
+    public static CompletableFuture<Suggestions> suggest(final SuggestionsBuilder builder, final Iterable<String> suggestions) {
+        final String token = builder.getRemainingLowerCase();
+        for (final String suggestion : suggestions) {
+            if (suggestion.toLowerCase().startsWith(token)) {
+                builder.suggest(suggestion);
+            }
+        }
+
+        return builder.buildFuture();
+    }
+
+    /**
+     * 입력 내용에 기반하여 제안 빌더와 일치하는 툴팁이 포함된 제안을 가져옵니다.
+     *
+     * @param builder 제안 빌더
+     * @param suggestions 제안 목록
+     * @return 제안
+     */
+    public static CompletableFuture<Suggestions> suggest(final SuggestionsBuilder builder, final Map<String, Component> suggestions) {
+        final String token = builder.getRemainingLowerCase();
+        for (final Map.Entry<String, Component> entry : suggestions.entrySet()) {
+            final String suggestion = entry.getKey();
+            if (suggestion.toLowerCase().startsWith(token)) {
+                builder.suggest(suggestion, MessageComponentSerializer.message().serialize(entry.getValue()));
+            }
+        }
+
+        return builder.buildFuture();
+    }
+    //</editor-fold>
+
+    //<editor-fold desc="Legacy" defaultstate="collapsed">
+    /**
+     * 명령어 디스패처를 가져옵니다.
+     * <p>
+     * 이 명령어가 레거시 기반으로 작동되는 경우 가상 디스패처가 필요합니다.
+     * </p>
+     *
+     * @return 명령어 디스패처
+     */
+    protected final CommandDispatcher<CommandSourceStack> getDispatcher() {
+        final CommandDispatcher<CommandSourceStack> dispatcher = new CommandDispatcher<>();
+        dispatcher.getRoot().addChild(this.command);
+        return dispatcher;
+    }
+
+    @Override
+    public final boolean execute(final CommandSender sender, final String label, final String[] args) {
+        if (!this.testPermission(sender)) {
+            return true;
+        }
+
+        try {
+            this.getDispatcher().execute(commandLine(label, args), sender.getCommandSource());
+            return true;
+        } catch (final CommandSyntaxException exception) {
+            sender.sendMessage(text("Usage: " + this.usageMessage, RED));
+            return false;
+        } catch (final Throwable exception) {
+            throw new CommandException("Unhandled exception executing '" + label + "' in " + this.getName(), exception);
+        }
+    }
+
+    @Override
+    public final List<String> tabComplete(final CommandSender sender, final String label, final String[] args) {
+        final List<String> results = new ArrayList<>();
+
+        final CommandDispatcher<CommandSourceStack> dispatcher = this.getDispatcher();
+        final ParseResults<CommandSourceStack> parsed = dispatcher.parse(commandLine(label, args), sender.getCommandSource());
+        dispatcher.getCompletionSuggestions(parsed).thenAccept((suggestions) -> {
+            suggestions.getList().forEach(suggestion -> {
+                results.add(suggestion.getText());
+            });
+        });
+
+        return results;
+    }
+
+    private String commandLine(final String label, final String[] args) {
+        return (label + ((args.length > 0) ? (" " + String.join(" ", args)) : ""));
+    }
+    //</editor-fold>
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/ArgumentInf.java b/src/main/java/moe/caramel/daydream/brigadier/argument/ArgumentInf.java
new file mode 100644
index 0000000000000000000000000000000000000000..0c68279122bbb9be8c0f32e7c949f1164b0d21b3
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/ArgumentInf.java
@@ -0,0 +1,11 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface ArgumentInf {
+
+    ArgumentType<?> get();
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/BlockPosArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockPosArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..905984202d20edbb2c7c996a16c02a9b668d4637
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockPosArgument.java
@@ -0,0 +1,74 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import static io.papermc.paper.command.brigadier.MessageComponentSerializer.message;
+import static net.kyori.adventure.text.Component.translatable;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import io.papermc.paper.command.brigadier.argument.ArgumentTypes;
+import io.papermc.paper.command.brigadier.argument.resolvers.BlockPositionResolver;
+import io.papermc.paper.math.BlockPosition;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface BlockPosArgument extends ArgumentInf {
+
+    Block getLoadedBlockPos(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException;
+
+    Block getSpawnablePos(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException;
+
+    @ApiStatus.Internal
+    static BlockPosArgument create() {
+        return new BlockPosArgument() {
+
+            static final SimpleCommandExceptionType ERROR_NOT_LOADED = new SimpleCommandExceptionType(message().serialize(translatable("argument.pos.unloaded")));
+            static final SimpleCommandExceptionType ERROR_OUT_OF_WORLD = new SimpleCommandExceptionType(message().serialize(translatable("argument.pos.outofworld")));
+            static final SimpleCommandExceptionType ERROR_OUT_OF_BOUNDS = new SimpleCommandExceptionType(message().serialize(translatable("argument.pos.outofbounds")));
+
+            @Override
+            public ArgumentType<BlockPositionResolver> get() {
+                return ArgumentTypes.blockPosition();
+            }
+
+            @Override
+            public Block getLoadedBlockPos(final CommandContext<CommandSourceStack> context, final String name) throws CommandSyntaxException {
+                final World world = context.getSource().getLocation().getWorld();
+                final BlockPosition pos = this.getBlockPos(context, name);
+                if (!world.isChunkLoaded(pos.blockX() >> 4, pos.blockZ() >> 4)) {
+                    throw ERROR_NOT_LOADED.create();
+                } else if (pos.blockX() >= -30000000 && pos.blockZ() >= -30000000 &&
+                           pos.blockX() < 30000000 && pos.blockZ() < 30000000 &&
+                           pos.blockY() < world.getMinHeight() || pos.blockY() > world.getMaxHeight()) {
+                    throw ERROR_OUT_OF_WORLD.create();
+                } else {
+                    return world.getBlockAt(pos.blockX(), pos.blockY(), pos.blockZ());
+                }
+            }
+
+            @Override
+            public Block getSpawnablePos(final CommandContext<CommandSourceStack> context, final String name) throws CommandSyntaxException {
+                final World world = context.getSource().getLocation().getWorld();
+                final BlockPosition pos = this.getBlockPos(context, name);
+                if (pos.blockY() < -20000000 || pos.blockY() >= 20000000 ||
+                    pos.blockX() < -30000000 || pos.blockX() >= 30000000 ||
+                    pos.blockZ() < -30000000 || pos.blockZ() >= 30000000) {
+                    throw ERROR_OUT_OF_BOUNDS.create();
+                } else {
+                    return world.getBlockAt(pos.blockX(), pos.blockY(), pos.blockZ());
+                }
+            }
+
+            private BlockPosition getBlockPos(final CommandContext<CommandSourceStack> context, final String name) throws CommandSyntaxException {
+                return context
+                    .getArgument(name, BlockPositionResolver.class)
+                    .resolve(context.getSource());
+            }
+        };
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/BlockStateArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockStateArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..7badf888b7724af4a17d77ad4088952c4e3cd31b
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockStateArgument.java
@@ -0,0 +1,54 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import io.papermc.paper.command.brigadier.argument.ArgumentTypes;
+import moe.caramel.daydream.brigadier.Resolvers;
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockState;
+import org.bukkit.block.data.BlockData;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+import java.util.function.Predicate;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface BlockStateArgument extends ArgumentInf {
+
+    BlockData getState(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException;
+
+    boolean place(CommandContext<CommandSourceStack> context, String name, World world, Location location, int flags);
+
+    Predicate<Block> getPredicate(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException;
+
+    @ApiStatus.Internal
+    static BlockStateArgument create() {
+        return new BlockStateArgument() {
+            @Override
+            public ArgumentType<BlockState> get() {
+                return ArgumentTypes.blockState();
+            }
+
+            @Override
+            public BlockData getState(final CommandContext<CommandSourceStack> context, final String name) {
+                return Resolvers.blockState(context, name).getBlockData();
+            }
+
+            @Override
+            public boolean place(final CommandContext<CommandSourceStack> context, final String name, final World world, final Location location, final int flags) {
+                final BlockState state = Resolvers.blockState(context, name);
+                world.setBlockData(location, state.getBlockData()); // ...
+                return false;
+            }
+
+            @Override
+            public Predicate<Block> getPredicate(final CommandContext<CommandSourceStack> context, final String name) {
+                return block -> block.getState().equals(Resolvers.blockState(context, name)); // ...
+            }
+        };
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/EntityAnchorArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityAnchorArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..22441a2b6d92802ef881e278094352b16f7e4ccd
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityAnchorArgument.java
@@ -0,0 +1,12 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.util.Vector;
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface EntityAnchorArgument {
+
+    Vector apply(Entity entity);
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/EntityArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..adef2206b70da031dab6ab9b4459593ce833cba8
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityArgument.java
@@ -0,0 +1,55 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import io.papermc.paper.command.brigadier.argument.ArgumentTypes;
+import io.papermc.paper.command.brigadier.argument.resolvers.selector.EntitySelectorArgumentResolver;
+import io.papermc.paper.command.brigadier.argument.resolvers.selector.PlayerSelectorArgumentResolver;
+import moe.caramel.daydream.brigadier.Resolvers;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.jspecify.annotations.NullMarked;
+import java.util.Collection;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface EntityArgument {
+
+    default ArgumentType<EntitySelectorArgumentResolver> entity() {
+        return ArgumentTypes.entity();
+    }
+
+    default ArgumentType<EntitySelectorArgumentResolver> entities() {
+        return ArgumentTypes.entities();
+    }
+
+    default ArgumentType<PlayerSelectorArgumentResolver> player() {
+        return ArgumentTypes.player();
+    }
+
+    default ArgumentType<PlayerSelectorArgumentResolver> players() {
+        return ArgumentTypes.players();
+    }
+
+    default Entity getEntity(final CommandContext<CommandSourceStack> context, final String name) throws CommandSyntaxException {
+        return Resolvers.entity(context, name);
+    }
+
+    default Collection<? extends Entity> getEntities(final CommandContext<CommandSourceStack> context, final String name) throws CommandSyntaxException {
+        return Resolvers.entities(context, name);
+    }
+
+    default Collection<Player> getOptionalPlayers(final CommandContext<CommandSourceStack> context, final String name) throws CommandSyntaxException {
+        return Resolvers.optionalPlayers(context, name);
+    }
+
+    default Player getPlayer(final CommandContext<CommandSourceStack> context, final String name) throws CommandSyntaxException {
+        return Resolvers.player(context, name);
+    }
+
+    default Collection<Player> getPlayers(final CommandContext<CommandSourceStack> context, final String name) throws CommandSyntaxException {
+        return Resolvers.players(context, name);
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/ItemArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/ItemArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..f0ee6a9ffb4300c4e2933909d6696a47efdc5282
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/ItemArgument.java
@@ -0,0 +1,53 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import static io.papermc.paper.command.brigadier.MessageComponentSerializer.message;
+import static net.kyori.adventure.text.Component.text;
+import static net.kyori.adventure.text.Component.translatable;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import io.papermc.paper.command.brigadier.argument.ArgumentTypes;
+import moe.caramel.daydream.brigadier.Resolvers;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface ItemArgument extends ArgumentInf {
+
+    default ItemStack getItem(final CommandContext<CommandSourceStack> context, final String name) throws CommandSyntaxException {
+        return this.createItemStack(context, name, 1, false);
+    }
+
+    ItemStack createItemStack(CommandContext<CommandSourceStack> context, String name, int amount, boolean checkOverstack) throws CommandSyntaxException;
+
+    @ApiStatus.Internal
+    static ItemArgument create() {
+        return new ItemArgument() {
+
+            static final Dynamic2CommandExceptionType ERROR_STACK_TOO_BIG = new Dynamic2CommandExceptionType(
+                (item, quantity) -> message()
+                    .serialize(
+                        translatable("arguments.item.overstacked")
+                            .arguments(text(item.toString()), text(quantity.toString()))));
+
+            @Override
+            public ArgumentType<ItemStack> get() {
+                return ArgumentTypes.itemStack();
+            }
+
+            @Override
+            public ItemStack createItemStack(final CommandContext<CommandSourceStack> context, final String name, final int amount, final boolean checkOverstack) throws CommandSyntaxException {
+                final ItemStack itemStack = Resolvers.itemStack(context, name);
+                if (checkOverstack && amount > itemStack.getMaxStackSize()) {
+                    throw ERROR_STACK_TOO_BIG.create(itemStack.translationKey(), itemStack.getMaxStackSize());
+                }
+                itemStack.setAmount(amount);
+                return itemStack;
+            }
+        };
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/MessageArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/MessageArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..d4de3b8e6de835ce726d5b7423fa60f16dbe3014
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/MessageArgument.java
@@ -0,0 +1,45 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import io.papermc.paper.command.brigadier.argument.ArgumentTypes;
+import io.papermc.paper.command.brigadier.argument.SignedMessageResolver;
+import moe.caramel.daydream.brigadier.Resolvers;
+import moe.caramel.daydream.player.chat.PlayerMessage;
+import net.kyori.adventure.text.Component;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+import java.util.function.Consumer;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface MessageArgument extends SimpleArgument<Component> {
+
+    void resolveMessage(CommandContext<CommandSourceStack> context,
+                        String name,
+                        Consumer<PlayerMessage> callback) throws CommandSyntaxException;
+
+    @ApiStatus.Internal
+    static MessageArgument create() {
+        return new MessageArgument() {
+            @Override
+            public ArgumentType<SignedMessageResolver> get() {
+                return ArgumentTypes.signedMessage();
+            }
+
+            @Override
+            public Component getData(final CommandContext<CommandSourceStack> context, final String name) {
+                return Component.text(Resolvers.signedMessage(context, name).content());
+            }
+
+            @Override
+            public void resolveMessage(final CommandContext<CommandSourceStack> context, final String name, final Consumer<PlayerMessage> callback) throws CommandSyntaxException {
+                Resolvers.signedMessage(context, name)
+                    .resolveSignedMessage(name, context)
+                    .thenAccept(signedMessage -> callback.accept((PlayerMessage) signedMessage));
+            }
+        };
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/ScoreHolderArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/ScoreHolderArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..e457315b967a10495b7a3c2ecb0fe6ab0074ffdf
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/ScoreHolderArgument.java
@@ -0,0 +1,44 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import moe.caramel.daydream.brigadier.data.ScoreHolder;
+import org.jspecify.annotations.NullMarked;
+import java.util.Collection;
+import java.util.function.Supplier;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface ScoreHolderArgument {
+
+    default ArgumentType<?> getHolder() {
+        throw new UnsupportedOperationException("This method is no longer supported.");
+    }
+
+    default ArgumentType<?> getHolders() {
+        throw new UnsupportedOperationException("This method is no longer supported.");
+    }
+
+    default ScoreHolder getName(CommandContext<? extends CommandSourceStack> context, String name) throws CommandSyntaxException {
+        throw new UnsupportedOperationException("This method is no longer supported.");
+    }
+
+    default Collection<ScoreHolder> getNames(CommandContext<? extends CommandSourceStack> context, String name) throws CommandSyntaxException {
+        throw new UnsupportedOperationException("This method is no longer supported.");
+    }
+
+    default Collection<ScoreHolder> getNamesWithDefaultWildcard(CommandContext<? extends CommandSourceStack> context, String name) throws CommandSyntaxException {
+        throw new UnsupportedOperationException("This method is no longer supported.");
+    }
+
+    default Collection<ScoreHolder> getNamesSupplier(CommandContext<? extends CommandSourceStack> context, String name, Supplier<Collection<String>> players) throws CommandSyntaxException {
+        throw new UnsupportedOperationException("This method is no longer supported.");
+    }
+
+    default SuggestionProvider<CommandSourceStack> getSuggestion() {
+        throw new UnsupportedOperationException("This method is no longer supported.");
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..2f563ece8ef9d3599c5b10658cca340965f2b7f2
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgument.java
@@ -0,0 +1,46 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+import java.util.function.BiFunction;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface SimpleArgument<T> extends ArgumentInf {
+
+    T getData(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException;
+
+    @ApiStatus.Internal
+    static <T> SimpleArgument<T> create() {
+        return new SimpleArgument<>() {
+            @Override
+            public ArgumentType<?> get() {
+                throw new UnsupportedOperationException("This method is no longer supported.");
+            }
+
+            @Override
+            public T getData(final CommandContext<CommandSourceStack> context, final String name) {
+                throw new UnsupportedOperationException("This method is no longer supported.");
+            }
+        };
+    }
+
+    @ApiStatus.Internal
+    static <T> SimpleArgument<T> create(final ArgumentType<?> type, final BiFunction<CommandContext<CommandSourceStack>, String, T> resolver) {
+        return new SimpleArgument<>() {
+            @Override
+            public ArgumentType<?> get() {
+                return type;
+            }
+
+            @Override
+            public T getData(final CommandContext<CommandSourceStack> context, final String name) {
+                return resolver.apply(context, name);
+            }
+        };
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/TimeArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/TimeArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..881fbdaac46b265d9cb62d8f255ce26d8443bb86
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/TimeArgument.java
@@ -0,0 +1,36 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import io.papermc.paper.command.brigadier.argument.ArgumentTypes;
+import moe.caramel.daydream.brigadier.Resolvers;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface TimeArgument extends SimpleArgument<Integer> {
+
+    ArgumentType<?> get(int minimum);
+
+    @ApiStatus.Internal
+    static TimeArgument create() {
+        return new TimeArgument() {
+            @Override
+            public ArgumentType<Integer> get() {
+                return ArgumentTypes.time();
+            }
+
+            @Override
+            public ArgumentType<Integer> get(final int minimum) {
+                return ArgumentTypes.time(minimum);
+            }
+
+            @Override
+            public Integer getData(final CommandContext<CommandSourceStack> context, final String name) {
+                return Resolvers.time(context, name);
+            }
+        };
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/VecArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/VecArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..d777bd7e246fd8be37977d22d6002fce5eb6eb38
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/VecArgument.java
@@ -0,0 +1,45 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.google.common.base.Function;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import moe.caramel.daydream.brigadier.data.Position;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface VecArgument extends SimpleArgument<Position<CommandSourceStack>> {
+
+    ArgumentType<?> get(boolean centerIntegers);
+
+    @ApiStatus.Internal
+    static VecArgument create(final ArgumentType<?> type,
+                              final Function<Boolean, ArgumentType<?>> center,
+                              final PositionResolver resolver) {
+        return new VecArgument() {
+            @Override
+            public ArgumentType<?> get() {
+                return type;
+            }
+
+            @Override
+            public ArgumentType<?> get(final boolean centerIntegers) {
+                return center.apply(centerIntegers);
+            }
+
+            @Override
+            public Position<CommandSourceStack> getData(final CommandContext<CommandSourceStack> context, final String name) throws CommandSyntaxException {
+                return resolver.resolve(context, name);
+            }
+        };
+    }
+
+    @ApiStatus.Internal
+    @FunctionalInterface
+    interface PositionResolver {
+        Position<CommandSourceStack> resolve(final CommandContext<CommandSourceStack> context, final String name) throws CommandSyntaxException;
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/data/Position.java b/src/main/java/moe/caramel/daydream/brigadier/data/Position.java
new file mode 100644
index 0000000000000000000000000000000000000000..cad56ff56acce9bdb527d94a1b6ca35be0ba3094
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/data/Position.java
@@ -0,0 +1,35 @@
+package moe.caramel.daydream.brigadier.data;
+
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.bukkit.Location;
+import org.bukkit.util.Vector;
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface Position<C extends CommandSourceStack> {
+
+    Vector getPositionVector(C source);
+
+    default float getXRot(final C source) {
+        return source.getLocation().getPitch();
+    }
+
+    default float getYRot(final C source) {
+        return source.getLocation().getYaw();
+    }
+
+    Location getLocation(C source);
+
+    default boolean isXRelative() {
+        return false;
+    }
+
+    default boolean isYRelative() {
+        return false;
+    }
+
+    default boolean isZRelative() {
+        return false;
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/data/ScoreHolder.java b/src/main/java/moe/caramel/daydream/brigadier/data/ScoreHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..6557e5d19a279c6da5a5d69a7753196c0056e38a
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/data/ScoreHolder.java
@@ -0,0 +1,16 @@
+package moe.caramel.daydream.brigadier.data;
+
+import net.kyori.adventure.text.Component;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+
+@NullMarked
+@Deprecated(since = "1.21.7", forRemoval = true)
+public interface ScoreHolder {
+
+    String scoreboardName();
+
+    @Nullable Component displayName();
+
+    Component feedbackDisplayName();
+}
diff --git a/src/main/java/moe/caramel/daydream/util/NumberRange.java b/src/main/java/moe/caramel/daydream/util/NumberRange.java
new file mode 100644
index 0000000000000000000000000000000000000000..b21df77a52d31e7e0c38b33a6d77808abf2d7341
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/util/NumberRange.java
@@ -0,0 +1,35 @@
+package moe.caramel.daydream.util;
+
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+
+/**
+ * 숫자 범위를 지정합니다.
+ *
+ * @param <T> 숫자 타입 (Integer, Double ...)
+ */
+@NullMarked
+public record NumberRange<T extends Number>(@Nullable T min, @Nullable T max) {
+
+    /**
+     * 최솟값을 가져옵니다.
+     *
+     * @param def 기본값
+     * @return 최솟값
+     */
+    @Nullable
+    public T getMin(final @Nullable T def) {
+        return (min == null) ? def : min;
+    }
+
+    /**
+     * 최댓값을 가져옵니다.
+     *
+     * @param def 기본값
+     * @return 최댓값
+     */
+    @Nullable
+    public T getMax(final @Nullable T def) {
+        return (max == null) ? def : max;
+    }
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 220ffe1eb8f1be13c446fab18c6710adae8c461d..2ebf84b7a500b2189d5291e0438b6b4305608389 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -1107,6 +1107,41 @@ public final class Bukkit {
     }
     // Daydream end - Expose Brigadier command dispatcher
 
+    // Daydream start - (feature) Add Brigadier Command API
+    /**
+     * Brigadier 명령어를 등록합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @param command 명령어 노드
+     */
+    public static void registerCommand(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull moe.caramel.daydream.brigadier.BrigadierCommand command) {
+        server.registerCommand(plugin, command);
+    }
+
+    /**
+     * Brigadier 명령어를 등록 해제합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @param commands 명령어 레이블 배열
+     * @return 제거에 성공한 명령어 목록
+     */
+    @NotNull
+    public static List<String> unregisterCommands(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull String... commands) {
+        return server.unregisterCommands(plugin, commands);
+    }
+
+    /**
+     * 이 플러그인의 모든 Brigadier 명령어를 등록 해제합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @return 제거에 성공한 명령어 목록
+     */
+    @NotNull
+    public static List<String> unregisterAllCommands(@NotNull org.bukkit.plugin.Plugin plugin) {
+        return server.unregisterAllCommands(plugin);
+    }
+    // Daydream end - (feature) Add Brigadier Command API
+
     /**
      * Writes loaded players to disk.
      */
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 52783c96bf814741c8a84b3db135c71fac93b848..8d7fa92d5347471682116dec47ae8ab49bd15711 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -982,6 +982,35 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     public <S extends io.papermc.paper.command.brigadier.CommandSourceStack> com.mojang.brigadier.CommandDispatcher<S> getCommandDispatcher();
     // Daydream end - Expose Brigadier command dispatcher
 
+    // Daydream start - (feature) Add Brigadier Command API
+    /**
+     * Brigadier 명령어를 등록합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @param command 명령어 노드
+     */
+    public void registerCommand(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull moe.caramel.daydream.brigadier.BrigadierCommand command);
+
+    /**
+     * Brigadier 명령어를 등록 해제합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @param commands 명령어 레이블 배열
+     * @return 제거에 성공한 명령어 목록
+     */
+    @NotNull
+    public List<String> unregisterCommands(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull String... commands);
+
+    /**
+     * 이 플러그인의 모든 Brigadier 명령어를 등록 해제합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @return 제거에 성공한 명령어 목록
+     */
+    @NotNull
+    public List<String> unregisterAllCommands(@NotNull org.bukkit.plugin.Plugin plugin);
+    // Daydream end - (feature) Add Brigadier Command API
+
     /**
      * Writes loaded players to disk.
      */
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index 27a7c69f23084e821d945d5e97e51a94ddd94e58..29154c3e60eaf8004b34d0f31485971391acb7b1 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -355,6 +355,22 @@ public abstract class Command {
         return usageMessage;
     }
 
+    // Daydream start - (feature) Add Brigadier Command API (Command Utility)
+    /**
+     * Sets the list of aliases to request on registration for this command.
+     * This is not effective outside of defining aliases in the {@link
+     * PluginDescriptionFile#getCommands()} (under the
+     * `<code>aliases</code>' node) is equivalent to this method.
+     *
+     * @param aliases aliases to register to this command
+     * @return this command object, for chaining
+     */
+    @NotNull
+    public Command setAliases(@NotNull String... aliases) {
+        return setAliases(List.of(aliases));
+    }
+    // Daydream end - (feature) Add Brigadier Command API (Command Utility)
+
     /**
      * Sets the list of aliases to request on registration for this command.
      * This is not effective outside of defining aliases in the {@link
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 7bdbfbd48329ab0900e6428cc3d5e8aa7f1d26bb..b1929f59b498a4b66302ce629f06dba9b99dc8e0 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -436,6 +436,36 @@ public abstract class JavaPlugin extends PluginBase {
         });
     }
 
+    // Daydream start - (feature) Add Brigadier Command API
+    /**
+     * Brigadier 명령어를 등록합니다.
+     *
+     * @param command 명령어 노드
+     */
+    public void registerCommand(final moe.caramel.daydream.brigadier.BrigadierCommand command) {
+        this.getServer().registerCommand(this, command);
+    }
+
+    /**
+     * Brigadier 명령어를 등록 해제합니다.
+     *
+     * @param commands 명령어 레이블 배열
+     * @return 제거에 성공한 명령어 목록
+     */
+    public List<String> unregisterCommands(final String... commands) {
+        return this.getServer().unregisterCommands(this, commands);
+    }
+
+    /**
+     * 이 플러그인의 모든 Brigadier 명령어를 등록 해제합니다.
+     *
+     * @return 제거에 성공한 명령어 목록
+     */
+    public List<String> unregisterAllCommands() {
+        return this.getServer().unregisterAllCommands(this);
+    }
+    // Daydream end - (feature) Add Brigadier Command API
+
     @Override
     public void onLoad() {}
 
