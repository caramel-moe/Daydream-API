From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Sun, 8 Aug 2021 03:05:54 +0900
Subject: [PATCH] Add more Damage API


diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 611a936b816f7f03e88027f03800308b7bf9d91c..cccccc4e4d7c620e2acdc9662839b8da2e51f1e3 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -410,4 +410,6 @@ public interface UnsafeValues {
     @NotNull
     java.util.ListIterator<ItemStack> createInventoryIterator(@NotNull org.bukkit.inventory.Inventory inventory, int nextIndex);
     // Daydream end - Proxy InventoryIterator
+
+    @NotNull org.bukkit.damage.DamageSource getCraftDamageSource(@NotNull Object nmsDamageSource); // Daydream - (feature) Add more Damage API
 }
diff --git a/src/main/java/org/bukkit/damage/DamageSource.java b/src/main/java/org/bukkit/damage/DamageSource.java
index 2a1a2a50e789094a77fe583bd95336024701e6e8..8ea8b3eacbbda8128ce7538e06440767257ad93c 100644
--- a/src/main/java/org/bukkit/damage/DamageSource.java
+++ b/src/main/java/org/bukkit/damage/DamageSource.java
@@ -11,6 +11,66 @@ import org.jetbrains.annotations.Nullable;
  */
 public interface DamageSource {
 
+    // Daydream start - (feature) Add more Damage API
+    /**
+     * NMS DamageSource를 가져옵니다.
+     *
+     * @return NMS DamageSource
+     */
+    @NotNull
+    public Object getNmsDamageSource();
+
+    /**
+     * 사용자 지정 메타데이터를 가져옵니다.
+     * <p>
+     * DamageSource 인스턴스는 재사용이 가능하므로 메타데이터 공유에 주의하세요.
+     *
+     * @return 사용자 지정 메타데이터
+     */
+    @NotNull
+    public java.util.Map<String, Object> getMetadata();
+
+    /**
+     * 이 인스턴스에 설정된 무적 시간을 가져옵니다.
+     *
+     * @return 무적 시간
+     */
+    @Nullable
+    public Integer getFixedNoDamageTick();
+
+    /**
+     * 이 인스턴스에 설정될 무적 시간을 설정합니다.
+     * <p>
+     * 이 설정은 이벤트에서 지정된 무적 시간보다 우선순위가 낮습니다.
+     *
+     * @param ticks 무적 시간
+     */
+    public void setFixedNoDamageTick(@Nullable Integer ticks);
+
+    /**
+     * 대미지 처리 이후 엔티티가 받게 될 넉백의 비활성화 여부를 가져옵니다.
+     *
+     * @return 넉백 비활성화 여부
+     */
+    @Nullable
+    public Boolean isKnockbackDisabled();
+
+    /**
+     * 대미지 처리 이후 엔티티가 받게 될 넉백의 비활성화 여부를 설정합니다.
+     *
+     * @param disabled 넉백 비활성화 여부, {@code null}인 경우
+     * {@link org.bukkit.tag.DamageTypeTags#NO_KNOCKBACK}의 영향을 받습니다.
+     */
+    public void setKnockbackDisabled(@Nullable Boolean disabled);
+
+    /**
+     * 크리티컬 대미지 여부를 가져옵니다.
+     *
+     * @return 크리티컬 대미지 여부
+     */
+    public boolean isCritical();
+    // Daydream end - (feature) Add more Damage API
+
     /**
      * Get the {@link DamageType}.
      *
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index 6d5ae34b39d6001effc2faadd6c30e3a8ab109fa..7f4e2aa63869c7bd8e62fdfcb18dbf1d644736ec 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -215,6 +215,61 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
         return this.damageSource;
     }
 
+    // Daydream start - (feature) Add more Damage API
+    private NoDamageTickModifier noDamageTickModifier = NoDamageTickModifier.DEFAULT;
+
+    /**
+     * 이벤트 처리가 끝난 후 적용될 엔티티에 대한 무적 시간 계산 메커니즘을 구현합니다.
+     */
+    @FunctionalInterface
+    public interface NoDamageTickModifier {
+
+        /**
+         * 기본 메커니즘
+         * <p>
+         * {@link DamageSource#getFixedNoDamageTick()}의 무적 시간을 먼저 확인합니다.
+         */
+        NoDamageTickModifier DEFAULT = (e, s, t) -> {
+            final Integer noDmgTick = s.getFixedNoDamageTick();
+            return (noDmgTick != null) ? noDmgTick : t;
+        };
+
+        /**
+         * 엔티티 무적 시간을 수정합니다.
+         *
+         * @param entity 적용 엔티티
+         * @param source 대미지 소스 인스턴스
+         * @param currentTick 적용될 무적 시간
+         * @return 새로운 무적 시간
+         */
+        int newNoDamageTick(@NotNull org.bukkit.entity.LivingEntity entity,
+                            @NotNull DamageSource source,
+                            int currentTick);
+    }
+
+    /**
+     * 엔티티 무적 시간 계산 메커니즘을 가져옵니다.
+     *
+     * @return 무적 시간 계산 메커니즘
+     */
+    @NotNull
+    public NoDamageTickModifier getDamageTickModifier() {
+        return noDamageTickModifier;
+    }
+
+    /**
+     * 엔티티 무적 시간 계산 메커니즘을 설정합니다.
+     * <p>
+     * {@link DamageSource#getFixedNoDamageTick()}의 우선 순위보다 높습니다.
+     *
+     * @param modifier 무적 시간 계산 메커니즘
+     * @see NoDamageTickModifier#DEFAULT
+     */
+    public void setNoDamageTickModifier(final @NotNull NoDamageTickModifier modifier) {
+        this.noDamageTickModifier = modifier;
+    }
+    // Daydream end - (feature) Add more Damage API
+
     @Override
     public boolean isCancelled() {
         return this.cancelled;
