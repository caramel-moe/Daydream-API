From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Sun, 8 Aug 2021 03:05:54 +0900
Subject: [PATCH] Add more Damage API


diff --git a/src/main/java/moe/caramel/daydream/world/DamageContext.java b/src/main/java/moe/caramel/daydream/world/DamageContext.java
new file mode 100644
index 0000000000000000000000000000000000000000..d9bd2aa043606126514ec3e54f968d8e7f574943
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/world/DamageContext.java
@@ -0,0 +1,71 @@
+package moe.caramel.daydream.world;
+
+import org.bukkit.damage.DamageSource;
+import org.jspecify.annotations.NullMarked;
+import java.util.Map;
+
+/**
+ * 대미지 컨텍스트
+ */
+@NullMarked
+public interface DamageContext {
+
+    /**
+     * NMS DamageSource를 가져옵니다.
+     *
+     * @return NMS DamageSource
+     */
+    Object getRawDamageSource();
+
+    /**
+     * DamageSource를 가져옵니다.
+     *
+     * @return DamageSource
+     */
+    DamageSource getDamageSource();
+
+    /**
+     * 사용자 지정 메타데이터를 가져옵니다.
+     *
+     * @return 사용자 지정 메타데이터
+     */
+    Map<String, Object> getMetadata();
+
+    //<editor-fold desc="No damage tick" defaultstate="collapsed">
+    int NO_DATA = -1;
+
+    /**
+     * 대상 엔티티에게 설정될 무적 시간을 가져옵니다.
+     * LivingEntity가 아닌 경우 {@link #NO_DATA}를 반환합니다.
+     *
+     * @return 무적 시간
+     */
+    int getNoDamageTick();
+
+    /**
+     * 대상 엔티티의 무적 시간을 설정합니다.
+     * LivingEntity가 아닌 경우 값이 적용되지 않습니다.
+     *
+     * @param ticks 무적 시간
+     */
+    void setNoDamageTick(int ticks);
+    //</editor-fold>
+
+    //<editor-fold desc="Knockback" defaultstate="collapsed">
+    /**
+     * 대미지 처리 이후 엔티티가 받게 될 넉백의 비활성화 여부를 가져옵니다.
+     *
+     * @return 넉백 비활성화 여부, {@link org.bukkit.damage.DamageType}에
+     * {@link org.bukkit.Tag#DAMAGE_TYPE_NO_KNOCKBACK}가 있는 경우에도
+     * {@code true}를 반환합니다.
+     */
+    boolean isKnockbackDisabled();
+
+    /**
+     * 대미지 처리 이후 엔티티가 받게 될 넉백의 비활성화 여부를 설정합니다.
+     *
+     * @param disabled 넉백 비활성화 여부
+     */
+    void setKnockbackDisabled(boolean disabled);
+    //</editor-fold>
+}
diff --git a/src/main/java/org/bukkit/Tag.java b/src/main/java/org/bukkit/Tag.java
index 193858a2815588dc6736a4b8d4cadd7262860757..de260586b1d92d943039b03777ff3667b7883a50 100644
--- a/src/main/java/org/bukkit/Tag.java
+++ b/src/main/java/org/bukkit/Tag.java
@@ -1453,6 +1453,44 @@ public interface Tag<T extends Keyed> extends Keyed {
     Tag<GameEvent> GAME_EVENT_ALLAY_CAN_LISTEN = Bukkit.getTag(REGISTRY_GAME_EVENTS, NamespacedKey.minecraft("allay_can_listen"), GameEvent.class);
     // Paper end
 
+    // Daydream start - (feature) Add more Damage API
+    String REGISTRY_DAMAGE_TYPE = "damage_type";
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_DAMAGES_HELMET = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("damages_helmet"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_BYPASSES_ARMOR = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("bypasses_armor"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_BYPASSES_SHIELD = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("bypasses_shield"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_BYPASSES_INVULNERABILITY = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("bypasses_invulnerability"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_BYPASSES_COOLDOWN = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("bypasses_cooldown"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_BYPASSES_EFFECTS = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("bypasses_effects"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_BYPASSES_RESISTANCE = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("bypasses_resistance"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_BYPASSES_ENCHANTMENTS = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("bypasses_enchantments"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_IS_FIRE = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("is_fire"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_IS_PROJECTILE = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("is_projectile"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_WITCH_RESISTANT_TO = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("witch_resistant_to"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_IS_EXPLOSION = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("is_explosion"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_IS_FALL = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("is_fall"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_IS_DROWNING = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("is_drowning"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_IS_FREEZING = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("is_freezing"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_IS_LIGHTNING = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("is_lightning"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_NO_ANGER = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("no_anger"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_NO_IMPACT = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("no_impact"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_ALWAYS_MOST_SIGNIFICANT_FALL = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("always_most_significant_fall"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_WITHER_IMMUNE_TO = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("wither_immune_to"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_IGNITES_ARMOR_STANDS = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("ignites_armor_stands"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_BURNS_ARMOR_STANDS = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("burns_armor_stands"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_AVOIDS_GUARDIAN_THORNS = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("avoids_guardian_thorns"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_ALWAYS_TRIGGERS_SILVERFISH = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("always_triggers_silverfish"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_ALWAYS_HURTS_ENDER_DRAGONS = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("always_hurts_ender_dragons"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_NO_KNOCKBACK = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("no_knockback"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_ALWAYS_KILLS_ARMOR_STANDS = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("always_kills_armor_stands"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_CAN_BREAK_ARMOR_STAND = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("can_break_armor_stand"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_BYPASSES_WOLF_ARMOR = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("bypasses_wolf_armor"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_IS_PLAYER_ATTACK = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("is_player_attack"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_BURN_FROM_STEPPING = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("burn_from_stepping"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_PANIC_CAUSES = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("panic_causes"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_PANIC_ENVIRONMENTAL_CAUSES = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("panic_environmental_causes"), org.bukkit.damage.DamageType.class);
+    Tag<org.bukkit.damage.DamageType> DAMAGE_TYPE_IS_MACE_SMASH = Bukkit.getTag(REGISTRY_DAMAGE_TYPE, NamespacedKey.minecraft("mace_smash"), org.bukkit.damage.DamageType.class);
+    // Daydream end - (feature) Add more Damage API
+
     /**
      * Returns whether or not this tag has an entry for the specified item.
      *
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 4ab29ec24aeb31af9168cc158033d599693d7729..2f3937e00bf83de7467c391abe589d5a4f4aea0f 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -408,4 +408,6 @@ public interface UnsafeValues {
     @NotNull
     java.util.ListIterator<ItemStack> createInventoryIterator(@NotNull org.bukkit.inventory.Inventory inventory, int nextIndex);
     // Daydream end - Proxy InventoryIterator
+
+    @NotNull moe.caramel.daydream.world.DamageContext getDamageContext(@NotNull Object damageSource); // Daydream - (feature) Add more Damage API
 }
diff --git a/src/main/java/org/bukkit/damage/DamageSource.java b/src/main/java/org/bukkit/damage/DamageSource.java
index 54fa3ebe541aa45829c672ea1a96296b123da48e..66574f2ccb4b16332dcd9e235021a7fcf6cd60a8 100644
--- a/src/main/java/org/bukkit/damage/DamageSource.java
+++ b/src/main/java/org/bukkit/damage/DamageSource.java
@@ -13,6 +13,23 @@ import org.jetbrains.annotations.Nullable;
 @ApiStatus.Experimental
 public interface DamageSource {
 
+    // Daydream start - (feature) Add more Damage API
+    /**
+     * 대미지 컨텍스트를 가져옵니다.
+     *
+     * @return 대미지 컨텍스트
+     */
+    @NotNull
+    public moe.caramel.daydream.world.DamageContext getDamageContext();
+
+    /**
+     * 크리티컬 대미지 여부를 가져옵니다.
+     *
+     * @return 크리티컬 대미지 여부
+     */
+    boolean isCritical();
+    // Daydream end - (feature) Add more Damage API
+
     /**
      * Get the {@link DamageType}.
      *
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index d1a5424ff3b289f1c82449ef6d88eb52665df41b..8277269be6b189c04d9bbe3eb5e7dae3809176f5 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -59,6 +59,18 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
         this.damageSource = damageSource;
     }
 
+    // Daydream start - (feature) Add more Damage API
+    /**
+     * 대미지 컨텍스트를 가져옵니다.
+     *
+     * @return 대미지 컨텍스트
+     */
+    @NotNull
+    public moe.caramel.daydream.world.DamageContext getDamageContext() {
+        return damageSource.getDamageContext();
+    }
+    // Daydream end - (feature) Add more Damage API
+
     @Override
     public boolean isCancelled() {
         return cancelled;
