From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Fri, 19 May 2023 20:56:45 +0900
Subject: [PATCH] Add more Explosion API


diff --git a/src/main/java/moe/caramel/daydream/world/Explosion.java b/src/main/java/moe/caramel/daydream/world/Explosion.java
new file mode 100644
index 0000000000000000000000000000000000000000..0f3b4d814e3d2663b03510d3f3ae0c42bb0b5449
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/world/Explosion.java
@@ -0,0 +1,130 @@
+package moe.caramel.daydream.world;
+
+import org.bukkit.World;
+import org.bukkit.damage.DamageSource;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.util.Vector;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.util.Collection;
+import java.util.Map;
+
+/**
+ * 폭발 래퍼
+ */
+@NullMarked
+public interface Explosion {
+
+    /**
+     * 폭발이 발생한 월드를 가져옵니다.
+     *
+     * @return 폭발이 발생한 월드
+     */
+    World getWorld();
+
+    /**
+     * {@link DamageSource}를 가져옵니다.
+     *
+     * @return {@link DamageSource}
+     */
+    DamageSource getDamageSource();
+
+    /**
+     * 메타데이터를 가져옵니다.
+     *
+     * @return 메타데이터
+     */
+    default Map<String, Object> getMetadata() {
+        return getDamageSource().getMetadata();
+    }
+
+    /**
+     * 폭발 시 방화 여부를 가져옵니다.
+     *
+     * @return 방화 여부
+     */
+    boolean isFire();
+
+    /**
+     * 폭발 발생 X 좌표를 가져옵니다.
+     *
+     * @return X 좌표
+     */
+    double getX();
+
+    /**
+     * 폭발 발생 Y 좌표를 가져옵니다.
+     *
+     * @return Y 좌표
+     */
+    double getY();
+
+    /**
+     * 폭발 발생 Z 좌표를 가져옵니다.
+     *
+     * @return Z 좌표
+     */
+    double getZ();
+
+    /**
+     * 폭발 범위를 가져옵니다.
+     *
+     * @return 폭발 범위
+     */
+    float getRadius();
+
+    /**
+     * 이 폭발에 블록이 영향받는지를 가져옵니다.
+     *
+     * @return 블록이 영향받는지 여부
+     */
+    boolean interactsWithBlocks();
+
+    /**
+     * 이 폭발에 영향을 받는 플레이어 목록을 가져옵니다.
+     *
+     * @return 플레이어 목록 및 벡터
+     */
+    Map<HumanEntity, Vector> getHitPlayers();
+
+    /**
+     * 이 폭발에 영향을 받는 플레이어 목록을 설정합니다.
+     *
+     * @param map 플레이어 목록 및 벡터
+     */
+    void setHitPlayers(Map<HumanEntity, Vector> map);
+
+    /**
+     * 이 폭발에 영향을 받는 플레이어 목록을 비웁니다.
+     */
+    void clearHitPlayers();
+
+    /**
+     * 폭발을 시작합니다.
+     */
+    default void explode() {
+        this.explode(true);
+    }
+
+    /**
+     * 폭발을 시작합니다.
+     *
+     * @param send 폭발 결과 전송 여부
+     */
+    void explode(boolean send);
+
+    /**
+     * 폭발 결과를 대상 플레이어들에게 전송합니다.
+     *
+     * @param targets 대상 플레이어
+     */
+    void sendExplosion(@Nullable Collection<? extends Player> targets);
+
+    /**
+     * 폭발이 이벤트에 의해 취소되었는지 여부를 가져옵니다.
+     *
+     * @return 폭발 취소의 여부
+     */
+    boolean wasCancelled();
+}
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 01af6d541581ce14c63a9f329d3024006963c22f..49e0a4db856a6019ca1fdabd6d7a2a0351f0b8ec 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -2199,6 +2199,246 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      */
     public int getClearWeatherDuration();
 
+    // Daydream start - (feature) Add more Explosion API
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param loc Location to blow up
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param breakBlocks Whether or not to have blocks be destroyed
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    default moe.caramel.daydream.world.Explosion explosion(@NotNull Location loc, float power, boolean setFire, boolean breakBlocks, @Nullable Entity source) {
+        return explosion(loc.getX(), loc.getY(), loc.getZ(), power, setFire, breakBlocks, source);
+    }
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param breakBlocks Whether or not to have blocks be destroyed
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    default moe.caramel.daydream.world.Explosion explosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks, @Nullable Entity source) {
+        return explosion(
+            x, y, z, power, setFire, (breakBlocks ? ExplosionAction.MOB : ExplosionAction.NONE),
+            Particle.EXPLOSION_EMITTER, null, Particle.EXPLOSION, null,
+            Sound.ENTITY_GENERIC_EXPLODE, source
+        );
+    }
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param loc Location to blow up
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param explosionAction Explosion action
+     * @param largeParticle Large particle
+     * @param largeData Large particle data
+     * @param smallParticle Small particle
+     * @param smallData Small particle data
+     * @param sound Explosion sound
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    default  <T> moe.caramel.daydream.world.Explosion explosion(
+        @NotNull Location loc, float power, boolean setFire, @NotNull ExplosionAction explosionAction,
+        @NotNull Particle largeParticle, @Nullable T largeData,
+        @NotNull Particle smallParticle, @Nullable T smallData,
+        @NotNull String sound, @Nullable Entity source
+    ) {
+        return explosion(loc.getX(), loc.getY(), loc.getZ(), power, setFire, explosionAction, largeParticle, largeData, smallParticle, smallData, sound, source);
+    }
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param loc Location to blow up
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param explosionAction Explosion action
+     * @param largeParticle Large particle
+     * @param largeData Large particle data
+     * @param smallParticle Small particle
+     * @param smallData Small particle data
+     * @param sound Explosion sound
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    default <T> moe.caramel.daydream.world.Explosion explosion(
+        @NotNull Location loc, float power, boolean setFire, @NotNull ExplosionAction explosionAction,
+        @NotNull Particle largeParticle, @Nullable T largeData,
+        @NotNull Particle smallParticle, @Nullable T smallData,
+        @NotNull Sound sound, @Nullable Entity source
+    ) {
+        return explosion(loc.getX(), loc.getY(), loc.getZ(), power, setFire, explosionAction, largeParticle, largeData, smallParticle, smallData, sound, source);
+    }
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param explosionAction Explosion action
+     * @param largeParticle Large particle
+     * @param largeData Large particle data
+     * @param smallParticle Small particle
+     * @param smallData Small particle data
+     * @param sound Explosion sound
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    default <T> moe.caramel.daydream.world.Explosion explosion(
+        double x, double y, double z, float power, boolean setFire, @NotNull ExplosionAction explosionAction,
+        @NotNull Particle largeParticle, @Nullable T largeData,
+        @NotNull Particle smallParticle, @Nullable T smallData,
+        @NotNull String sound, @Nullable Entity source
+    ) {
+        return explosion(x, y, z, power, setFire, explosionAction, largeParticle, largeData, smallParticle, smallData, sound, null, source);
+    }
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param explosionAction Explosion action
+     * @param largeParticle Large particle
+     * @param largeData Large particle data
+     * @param smallParticle Small particle
+     * @param smallData Small particle data
+     * @param sound Explosion sound
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    default <T> moe.caramel.daydream.world.Explosion explosion(
+        double x, double y, double z, float power, boolean setFire, @NotNull ExplosionAction explosionAction,
+        @NotNull Particle largeParticle, @Nullable T largeData,
+        @NotNull Particle smallParticle, @Nullable T smallData,
+        @NotNull Sound sound, @Nullable Entity source
+    ) {
+        return explosion(x, y, z, power, setFire, explosionAction, largeParticle, largeData, smallParticle, smallData, sound, null, source);
+    };
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param explosionAction Explosion action
+     * @param largeParticle Large particle
+     * @param largeData Large particle data
+     * @param smallParticle Small particle
+     * @param smallData Small particle data
+     * @param sound Explosion sound
+     * @param damageSource damageSource the damage source
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    public <T> moe.caramel.daydream.world.Explosion explosion(
+        double x, double y, double z, float power, boolean setFire, @NotNull ExplosionAction explosionAction,
+        @NotNull Particle largeParticle, @Nullable T largeData,
+        @NotNull Particle smallParticle, @Nullable T smallData,
+        @NotNull String sound, @Nullable org.bukkit.damage.DamageSource damageSource, @Nullable Entity source
+    );
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param explosionAction Explosion action
+     * @param largeParticle Large particle
+     * @param largeData Large particle data
+     * @param smallParticle Small particle
+     * @param smallData Small particle data
+     * @param sound Explosion sound
+     * @param damageSource damageSource the damage source
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    public <T> moe.caramel.daydream.world.Explosion explosion(
+        double x, double y, double z, float power, boolean setFire, @NotNull ExplosionAction explosionAction,
+        @NotNull Particle largeParticle, @Nullable T largeData,
+        @NotNull Particle smallParticle, @Nullable T smallData,
+        @NotNull Sound sound, @Nullable org.bukkit.damage.DamageSource damageSource, @Nullable Entity source
+    );
+
+    /**
+     * 폭발 상호작용 목록
+     */
+    public enum ExplosionAction {
+        /**
+         * 아무 작업도 수행하지 않음
+         */
+        NONE,
+        /**
+         * 블록을 파괴함
+         */
+        BLOCK,
+        /**
+         * 몹이 파괴한 것으로 취급
+         */
+        MOB,
+        /**
+         * TNT 폭발로 취급
+         */
+        TNT,
+        /**
+         * 현재 {@link org.bukkit.entity.WindCharge}에서 취급
+         */
+        BLOW,
+        /**
+         * Spigot의 커스텀 동작
+         */
+        STANDARD
+    }
+    // Daydream end - (feature) Add more Explosion API
+
     /**
      * Creates explosion at given coordinates with given power
      *
diff --git a/src/main/java/org/bukkit/damage/DamageSource.java b/src/main/java/org/bukkit/damage/DamageSource.java
index 8ea8b3eacbbda8128ce7538e06440767257ad93c..41cc12557b189f1c63b7492d1d81a44254df3eb7 100644
--- a/src/main/java/org/bukkit/damage/DamageSource.java
+++ b/src/main/java/org/bukkit/damage/DamageSource.java
@@ -71,6 +71,16 @@ public interface DamageSource {
     public boolean isCritical();
     // Daydream end - (feature) Add more Damage API
 
+    // Daydream start - (feature) Add more Explosion API
+    /**
+     * 폭발 래퍼를 가져옵니다.
+     *
+     * @return 폭발 래퍼
+     */
+    @Nullable
+    public moe.caramel.daydream.world.Explosion getExplosion();
+    // Daydream end - (feature) Add more Explosion API
+
     /**
      * Get the {@link DamageType}.
      *
diff --git a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
index 96444dac986a2522107459477c4b67d99957121d..fa6eaffc36d10a3ed0590f1a22a9ae879f9261ca 100644
--- a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
@@ -32,11 +32,29 @@ public class BlockExplodeEvent extends BlockEvent implements Cancellable {
 
     @ApiStatus.Internal
     public BlockExplodeEvent(@NotNull final Block block, @NotNull final BlockState blockState, @NotNull final List<Block> blocks, final float yield, @NotNull final ExplosionResult result) {
+        // Daydream start - (feature) Add more Explosion API
+        this(block, blockState, blocks, yield, result, null);
+    }
+    private final moe.caramel.daydream.world.Explosion explosion;
+
+    /**
+     * 폭발 래퍼를 가져옵니다.
+     *
+     * @return 폭발 래퍼
+     */
+    @NotNull
+    public moe.caramel.daydream.world.Explosion getExplosion() {
+        return explosion;
+    }
+
+    public BlockExplodeEvent(@NotNull final Block block, @NotNull final BlockState blockState, @NotNull final List<Block> blocks, final float yield, @NotNull final ExplosionResult result, @NotNull moe.caramel.daydream.world.Explosion explosion) {
+        // Daydream end - (feature) Add more Explosion API
         super(block);
         this.blockState = blockState;
         this.blocks = blocks;
         this.yield = yield;
         this.result = result;
+        this.explosion = explosion; // Daydream - (feature) Add more Explosion API
     }
 
     /**
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index 7f4e2aa63869c7bd8e62fdfcb18dbf1d644736ec..6250fe2b983b14f337429ca27a2a4857384541c0 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -270,6 +270,18 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
     }
     // Daydream end - (feature) Add more Damage API
 
+    // Daydream start - (feature) Add more Explosion API
+    /**
+     * 폭발 래퍼를 가져옵니다.
+     *
+     * @return 폭발 래퍼
+     */
+    @org.jetbrains.annotations.Nullable
+    public moe.caramel.daydream.world.Explosion getExplosion() {
+        return getDamageSource().getExplosion();
+    }
+    // Daydream end - (feature) Add more Explosion API
+
     @Override
     public boolean isCancelled() {
         return this.cancelled;
diff --git a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
index 9a8f5f6dca26b79579f0cb9621002448554b96e1..0337c8295742d88afb36fd691850d9ff22046fba 100644
--- a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
@@ -28,11 +28,29 @@ public class EntityExplodeEvent extends EntityEvent implements Cancellable {
 
     @ApiStatus.Internal
     public EntityExplodeEvent(@NotNull final Entity entity, @NotNull final Location location, @NotNull final List<Block> blocks, final float yield, @NotNull final ExplosionResult result) {
+        // Daydream start - (feature) Add more Explosion API
+        this(entity, location, blocks, yield, result, null);
+    }
+    private final moe.caramel.daydream.world.Explosion explosion;
+
+    /**
+     * 폭발 래퍼를 가져옵니다.
+     *
+     * @return 폭발 래퍼
+     */
+    @NotNull
+    public moe.caramel.daydream.world.Explosion getExplosion() {
+        return explosion;
+    }
+
+    public EntityExplodeEvent(@NotNull final Entity entity, @NotNull final Location location, @NotNull final List<Block> blocks, final float yield, @NotNull final ExplosionResult result, @NotNull moe.caramel.daydream.world.Explosion explosion) {
+        // Daydream end - (feature) Add more Explosion API
         super(entity);
         this.location = location;
         this.blocks = blocks;
         this.yield = yield;
         this.result = result;
+        this.explosion = explosion; // Daydream - (feature) Add more Explosion API
     }
 
     /**
diff --git a/src/main/java/org/bukkit/tag/DamageTypeTags.java b/src/main/java/org/bukkit/tag/DamageTypeTags.java
index 32ac1e1ecbf9e6f471180c4ef99d2e13a71d4d79..ab031fd9baf59ba38fd318a203e9fcaeb3b363f6 100644
--- a/src/main/java/org/bukkit/tag/DamageTypeTags.java
+++ b/src/main/java/org/bukkit/tag/DamageTypeTags.java
@@ -81,6 +81,13 @@ public final class DamageTypeTags {
 
     public static final Tag<DamageType> WITHER_IMMUNE_TO = getTag("wither_immune_to");
     // End generate - DamageTypeTags
+
+    // Daydream start - (feature) Add more Explosion API
+    public static final Tag<DamageType> CARAMEL$EXPLOSION_NO_KNOCKBACK = getTag("caramel:explosion_no_knockback");
+    public static final Tag<DamageType> CARAMEL$EXPLOSION_NO_BLOCK_BREAK = getTag("caramel:explosion_no_block_break");
+    public static final Tag<DamageType> CARAMEL$EXPLOSION_NO_HURT_ENTITY = getTag("caramel:explosion_no_hurt_entity");
+    // Daydream end - (feature) Add more Explosion API
+
     /**
      * Vanilla tag representing damage types which originate from mace smashes.
      *
@@ -96,7 +103,7 @@ public final class DamageTypeTags {
 
     @Nullable
     private static Tag<DamageType> getTag(String key) {
-        return Bukkit.getTag(REGISTRY_DAMAGE_TYPES, NamespacedKey.minecraft(key), DamageType.class);
+        return Bukkit.getTag(REGISTRY_DAMAGE_TYPES, java.util.Objects.requireNonNull(NamespacedKey.fromString(key)), DamageType.class); // Daydream - (feature) Add more Explosion API
     }
 
     private DamageTypeTags() {
