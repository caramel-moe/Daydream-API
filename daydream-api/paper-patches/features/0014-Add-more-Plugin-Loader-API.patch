From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Thu, 28 Nov 2024 17:36:36 +0900
Subject: [PATCH] Add more Plugin Loader API


diff --git a/src/main/java/io/papermc/paper/plugin/loader/PluginClasspathBuilder.java b/src/main/java/io/papermc/paper/plugin/loader/PluginClasspathBuilder.java
index ddb768057cdfd9202e4386494fd5f643692c73a1..b4bea9e04b213892fd84000cc3c491bc589520c4 100644
--- a/src/main/java/io/papermc/paper/plugin/loader/PluginClasspathBuilder.java
+++ b/src/main/java/io/papermc/paper/plugin/loader/PluginClasspathBuilder.java
@@ -33,5 +33,16 @@ public interface PluginClasspathBuilder {
     @Contract("_ -> this")
     PluginClasspathBuilder addLibrary(ClassPathLibrary classPathLibrary);
 
+    // Daydream start - (feature) Add more Plugin Loader API
+    /**
+     * 플러그인 인스턴스를 생성하기 전에 등록할 클래스 경로를 추가합니다.
+     *
+     * @param url 클래스 경로
+     * @return self
+     */
+    @Contract("_ -> this")
+    PluginClasspathBuilder addLibraryBeforeCreateInstance(java.net.URL url);
+    // Daydream end - (feature) Add more Plugin Loader API
+
     PluginProviderContext getContext();
 }
diff --git a/src/main/java/io/papermc/paper/plugin/loader/library/impl/MavenLibraryResolver.java b/src/main/java/io/papermc/paper/plugin/loader/library/impl/MavenLibraryResolver.java
index 298bb04c294a89ad783eb3dac73faf47fa5fb1ba..b73c751cbe6da48846b51316e1b904ce84160b11 100644
--- a/src/main/java/io/papermc/paper/plugin/loader/library/impl/MavenLibraryResolver.java
+++ b/src/main/java/io/papermc/paper/plugin/loader/library/impl/MavenLibraryResolver.java
@@ -67,10 +67,12 @@ public class MavenLibraryResolver implements ClassPathLibrary {
     );
     private static final Logger LOGGER = LoggerFactory.getLogger("MavenLibraryResolver");
 
-    private final RepositorySystem repository;
-    private final DefaultRepositorySystemSession session;
-    private final List<RemoteRepository> repositories = new ArrayList<>();
-    private final List<Dependency> dependencies = new ArrayList<>();
+    // Daydream start - (feature) Add more Plugin Loader API
+    public final RepositorySystem repository;
+    public final DefaultRepositorySystemSession session;
+    public final List<RemoteRepository> repositories = new ArrayList<>();
+    public final List<Dependency> dependencies = new ArrayList<>();
+    // Daydream end - (feature) Add more Plugin Loader API
 
     /**
      * Creates a new maven library resolver instance.
diff --git a/src/main/java/moe/caramel/daydream/plugin/DynamicURLClassLoader.java b/src/main/java/moe/caramel/daydream/plugin/DynamicURLClassLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..5fa46a53c0514aef606779a2f7a9128bd331013f
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/plugin/DynamicURLClassLoader.java
@@ -0,0 +1,42 @@
+package moe.caramel.daydream.plugin;
+
+import org.jetbrains.annotations.ApiStatus;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.net.URLStreamHandlerFactory;
+
+/**
+ * 동적으로 URL 클래스를 로더할 수 있는 클래스로더
+ */
+@ApiStatus.Internal
+public class DynamicURLClassLoader extends URLClassLoader {
+
+    public DynamicURLClassLoader(final URL[] urls, final ClassLoader parent) {
+        super(urls, parent);
+    }
+
+    public DynamicURLClassLoader(final URL[] urls) {
+        super(urls);
+    }
+
+    public DynamicURLClassLoader(final URL[] urls, final ClassLoader parent, final URLStreamHandlerFactory factory) {
+        super(urls, parent, factory);
+    }
+
+    public DynamicURLClassLoader(final String name, final URL[] urls, final ClassLoader parent) {
+        super(name, urls, parent);
+    }
+
+    public DynamicURLClassLoader(final String name, final URL[] urls, final ClassLoader parent, final URLStreamHandlerFactory factory) {
+        super(name, urls, parent, factory);
+    }
+
+    /**
+     * 무엇을 하고 있는지 자세히 알고 있는 경우에만 사용하세요.
+     *
+     * @param url the URL to be added to the search path of URLs
+     */
+    public void addURLIfYouKnowWhatYouAreDoing(final URL url) {
+        super.addURL(url);
+    }
+}
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index c53cac5cbaa65a1c984043f69d159118c80fa6dd..bd2b770cdbd0a7ac2540869686d4a1700d69889e 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -33,7 +33,7 @@ import org.jetbrains.annotations.Nullable;
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
  */
 @org.jetbrains.annotations.ApiStatus.Internal // Paper
-public final class PluginClassLoader extends URLClassLoader implements io.papermc.paper.plugin.provider.classloader.ConfiguredPluginClassLoader { // Paper
+public final class PluginClassLoader extends moe.caramel.daydream.plugin.DynamicURLClassLoader implements io.papermc.paper.plugin.provider.classloader.ConfiguredPluginClassLoader { // Paper // Daydream - (feature) Add more Plugin Loader API
     private final JavaPluginLoader loader;
     private final Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
     private final PluginDescriptionFile description;
@@ -60,6 +60,11 @@ public final class PluginClassLoader extends URLClassLoader implements io.paperm
      */
     @org.jetbrains.annotations.ApiStatus.Internal // Paper
     public PluginClassLoader(@Nullable final ClassLoader parent, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file, @Nullable ClassLoader libraryLoader, JarFile jarFile, io.papermc.paper.plugin.provider.entrypoint.DependencyContext dependencyContext) throws IOException, InvalidPluginException, MalformedURLException { // Paper - use JarFile provided by SpigotPluginProvider
+        // Daydream start - (feature) Add more Plugin Loader API
+        this(parent, description, dataFolder, file, libraryLoader, jarFile, dependencyContext, java.util.List.of());
+    }
+    public PluginClassLoader(@Nullable final ClassLoader parent, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file, @Nullable ClassLoader libraryLoader, JarFile jarFile, io.papermc.paper.plugin.provider.entrypoint.DependencyContext dependencyContext, java.util.List<URL> afterLibraries) throws IOException, InvalidPluginException, MalformedURLException {
+        // Daydream end - (feature) Add more Plugin Loader API
         super(file.getName(), new URL[] {file.toURI().toURL()}, parent);
         this.loader = null; // Paper - pass null into loader field
 
@@ -77,6 +82,8 @@ public final class PluginClassLoader extends URLClassLoader implements io.paperm
         this.classLoaderGroup = io.papermc.paper.plugin.provider.classloader.PaperClassLoaderStorage.instance().registerSpigotGroup(this);
         // Paper end
 
+        afterLibraries.forEach(this::addURLIfYouKnowWhatYouAreDoing); // Daydream - (feature) Add more Plugin Loader API
+
         Class<?> jarClass;
         try {
             jarClass = Class.forName(description.getMain(), true, this);
